with gr.Blocks(theme=theme, css="chat/chat.css") as demo:
    gr.Image("https://iyyu.com/_nuxt/img/navbar_logoW@2x.79eba99.png", interactive=False,
             tool="image", show_label=False, elem_classes="logo").style(width=200)
    chatbot = gr.Chatbot()
    msg = gr.Textbox()
    submit = gr.Button("Submit")

    def user(user_message, history):
        return "", add_user_message(user_message, history)

    def add_user_message(user_message, history):
        history.append([user_message, None])
        return history

    def bot(history):
        user_message = history[-1][0]

        # Determine the bot's response
        bot_response = determine_bot_response(user_message)

        # Add the response to the history
        history = add_bot_response(bot_response, history)

        # Simulate more natural conversation timing
        if not bot_response.startswith("ChatGPT - "):
            time.sleep(1)

        return history

    def add_bot_response(bot_response, history):
        history.append([None, bot_response])
        return history

    def determine_bot_response(user_message):
        intent_name, confidence_score = intent_model.get_intent(question=user_message)
        confidence_score = max(confidence_score)

        intent_data = get_object_by_intent(intent_name)

        use_gpt = intent_data['use_gpt']
        generate_context = True

        if confidence_score >= minimum_confidence_score:
            question_to_ask = user_message if privacy_level <= 1 or not use_gpt or len(intent_data['responses']) == 0 else intent_data['responses'][0]
        else:
            if privacy_level >= 1: 
                use_gpt = False
                intent_data = None
            else:
                use_gpt = True
                question_to_ask = user_message

        if (not use_gpt and intent_data == None):
            response = "I'm sorry, I'm not sure I understand your question. Could you please rephrase it?"
        else:
            response = f"<em><strong>({'ChatGPT - ' if use_gpt else ''}intent found ({confidence_score}): {intent_name}):</strong></em>\n"
            if use_gpt:
                response += gpt_model.answer_question(question=question_to_ask, with_context=generate_context)
            else:
                response += intent_data['responses'][0]

        return response

    msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(
        bot, chatbot, chatbot
    )
    submit.click(user, [msg, chatbot], [msg, chatbot], queue=False).then(
        bot, chatbot, chatbot
    )

demo.launch()
